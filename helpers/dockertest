#!/bin/bash

# test the github distribution in a container

# build the base container

docker build -t tarproctest-base - <<EOF
FROM ubuntu:19.10
ENV LC_ALL=C
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get -qqy update
RUN apt-get install -qqy git
RUN apt-get install -qqy python3
RUN apt-get install -qqy python3-pip
RUN apt-get install -qqy python3-venv
RUN apt-get install -qqy curl
WORKDIR /tmp
RUN python3 -m venv venv
RUN . venv/bin/activate; pip install --no-cache-dir pytest
EOF


case $1 in

local)

cat > Dockerfile <<EOF
FROM tarproctest-base
ENV SHELL=/bin/bash
COPY . /tmp/tarproc
WORKDIR /tmp/tarproc
RUN ls -l
RUN ln -s /tmp/venv .
RUN . venv/bin/activate; pip install --no-cache-dir pytest
RUN . venv/bin/activate; pip install --no-cache-dir -r requirements.txt
RUN . venv/bin/activate; python3 -m pytest
EOF

docker build -t tarproctest .

rm -f Dockerfile
;;

# run the test as a second stage build without caching

git)

docker build -t tarproctest --no-cache - <<EOF
FROM tarproctest-base
ENV SHELL=/bin/bash
RUN git clone https://git@github.com/tmbdev/tarproc.git /tmp/tarproc
WORKDIR /tmp/tarproc
RUN ln -s /tmp/venv .
RUN . venv/bin/activate; pip install --no-cache-dir pytest
RUN . venv/bin/activate; pip install --no-cache-dir -r requirements.txt
RUN . venv/bin/activate; python3 -m pytest
EOF
;;

# run the test as a second stage build without caching

pip)

docker build -t tarproctest --no-cache - <<EOF
FROM tarproctest-base
ENV SHELL=/bin/bash
RUN git clone https://git@github.com/tmbdev/tarproc.git /tmp/tarproc
RUN mkdir /tmp/testdir
RUN mv /tmp/tarproc/test /tmp/testdir
WORKDIR /tmp/testdir
RUN pip3 install pytest
RUN pip3 install tarproc
RUN env PREFIX=/usr/local/bin python3 -m pytest -v -x
EOF
;;

*)
echo $1: must specify either pip or git
exit 1
;;

esac
